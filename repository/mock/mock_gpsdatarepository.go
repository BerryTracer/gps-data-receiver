// Code generated by MockGen. DO NOT EDIT.
// Source: repository/gpsdatarepository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "github.com/BerryTracer/gps-data-service/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGPSDataRepository is a mock of GPSDataRepository interface.
type MockGPSDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGPSDataRepositoryMockRecorder
}

// MockGPSDataRepositoryMockRecorder is the mock recorder for MockGPSDataRepository.
type MockGPSDataRepositoryMockRecorder struct {
	mock *MockGPSDataRepository
}

// NewMockGPSDataRepository creates a new mock instance.
func NewMockGPSDataRepository(ctrl *gomock.Controller) *MockGPSDataRepository {
	mock := &MockGPSDataRepository{ctrl: ctrl}
	mock.recorder = &MockGPSDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGPSDataRepository) EXPECT() *MockGPSDataRepositoryMockRecorder {
	return m.recorder
}

// FindByDeviceID mocks base method.
func (m *MockGPSDataRepository) FindByDeviceID(ctx context.Context, deviceID string) ([]*model.GPSData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDeviceID", ctx, deviceID)
	ret0, _ := ret[0].([]*model.GPSData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDeviceID indicates an expected call of FindByDeviceID.
func (mr *MockGPSDataRepositoryMockRecorder) FindByDeviceID(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDeviceID", reflect.TypeOf((*MockGPSDataRepository)(nil).FindByDeviceID), ctx, deviceID)
}

// FindByUserID mocks base method.
func (m *MockGPSDataRepository) FindByUserID(ctx context.Context, userID string) ([]*model.GPSData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].([]*model.GPSData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockGPSDataRepositoryMockRecorder) FindByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockGPSDataRepository)(nil).FindByUserID), ctx, userID)
}

// Save mocks base method.
func (m *MockGPSDataRepository) Save(ctx context.Context, gpsData *model.GPSData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, gpsData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockGPSDataRepositoryMockRecorder) Save(ctx, gpsData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockGPSDataRepository)(nil).Save), ctx, gpsData)
}
